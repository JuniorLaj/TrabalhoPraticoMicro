

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Jan 03 22:50:58 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F628A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  008C                     	;# 
    84  008E                     	;# 
    85  0092                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009F                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001F                     	;# 
   117  0081                     	;# 
   118  0085                     	;# 
   119  0086                     	;# 
   120  008C                     	;# 
   121  008E                     	;# 
   122  0092                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009F                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  008C                     	;# 
   158  008E                     	;# 
   159  0092                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009A                     	;# 
   163  009B                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009F                     	;# 
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000E                     	;# 
   178  000E                     	;# 
   179  000F                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001F                     	;# 
   191  0081                     	;# 
   192  0085                     	;# 
   193  0086                     	;# 
   194  008C                     	;# 
   195  008E                     	;# 
   196  0092                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009F                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000E                     	;# 
   215  000E                     	;# 
   216  000F                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0015                     	;# 
   221  0015                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001F                     	;# 
   228  0081                     	;# 
   229  0085                     	;# 
   230  0086                     	;# 
   231  008C                     	;# 
   232  008E                     	;# 
   233  0092                     	;# 
   234  0098                     	;# 
   235  0099                     	;# 
   236  009A                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009F                     	;# 
   241  0000                     	;# 
   242  0001                     	;# 
   243  0002                     	;# 
   244  0003                     	;# 
   245  0004                     	;# 
   246  0005                     	;# 
   247  0006                     	;# 
   248  000A                     	;# 
   249  000B                     	;# 
   250  000C                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0015                     	;# 
   258  0015                     	;# 
   259  0016                     	;# 
   260  0017                     	;# 
   261  0018                     	;# 
   262  0019                     	;# 
   263  001A                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  008C                     	;# 
   269  008E                     	;# 
   270  0092                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009A                     	;# 
   274  009B                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009F                     	;# 
   278                           
   279                           	psect	strings
   280  0001                     __pstrings:
   281  0001                     stringtab:
   282  0001                     __stringtab:
   283  0001                     stringcode:	
   284                           ;	String table - string pointers are 1 byte each
   285                           
   286  0001                     stringdir:
   287  0001  3000               	movlw	high stringdir
   288  0002  008A               	movwf	10
   289  0003  0804               	movf	4,w
   290  0004  0A84               	incf	4,f
   291  0005  0782               	addwf	2,f
   292  0006                     __stringbase:
   293  0006  3400               	retlw	0
   294  0007                     __end_of__stringtab:
   295  0007                     _linha:
   296  0007  3402               	retlw	2
   297  0008  3404               	retlw	4
   298  0009  3440               	retlw	64
   299  000A  3480               	retlw	128
   300  000B                     __end_of_linha:
   301  0003                     _STATUSbits	set	3
   302  0006                     _PORTB	set	6
   303  001F                     _CMCON	set	31
   304  000B                     _INTCONbits	set	11
   305  0006                     _PORTBbits	set	6
   306  0005                     _PORTA	set	5
   307  0035                     _RB5	set	53
   308  0036                     _RB6	set	54
   309  0037                     _RB7	set	55
   310  0028                     _RA0	set	40
   311  0033                     _RB3	set	51
   312  0034                     _RB4	set	52
   313  009D                     _EECON2	set	157
   314  009C                     _EECON1	set	156
   315  0086                     _TRISB	set	134
   316  0085                     _TRISA	set	133
   317  008E                     _PCONbits	set	142
   318  009A                     _EEDATA	set	154
   319  009C                     _EECON1bits	set	156
   320  009B                     _EEADR	set	155
   321  000B                     STR_1:
   322  000B  3450               	retlw	80	;'P'
   323  000C  3472               	retlw	114	;'r'
   324  000D  3465               	retlw	101	;'e'
   325  000E  3473               	retlw	115	;'s'
   326  000F  3473               	retlw	115	;'s'
   327  0010  3469               	retlw	105	;'i'
   328  0011  346F               	retlw	111	;'o'
   329  0012  346E               	retlw	110	;'n'
   330  0013  3465               	retlw	101	;'e'
   331  0014  3420               	retlw	32	;' '
   332  0015  342A               	retlw	42	;'*'
   333  0016  3420               	retlw	32	;' '
   334  0017  3470               	retlw	112	;'p'
   335  0018  3461               	retlw	97	;'a'
   336  0019  3472               	retlw	114	;'r'
   337  001A  3461               	retlw	97	;'a'
   338  001B  3420               	retlw	32	;' '
   339  001C  3465               	retlw	101	;'e'
   340  001D  346E               	retlw	110	;'n'
   341  001E  3474               	retlw	116	;'t'
   342  001F  3472               	retlw	114	;'r'
   343  0020  3461               	retlw	97	;'a'
   344  0021  3472               	retlw	114	;'r'
   345  0022  3420               	retlw	32	;' '
   346  0023  346F               	retlw	111	;'o'
   347  0024  3475               	retlw	117	;'u'
   348  0025  3420               	retlw	32	;' '
   349  0026  3423               	retlw	35	;'#'
   350  0027  3420               	retlw	32	;' '
   351  0028  3470               	retlw	112	;'p'
   352  0029  3461               	retlw	97	;'a'
   353  002A  3472               	retlw	114	;'r'
   354  002B  3461               	retlw	97	;'a'
   355  002C  3420               	retlw	32	;' '
   356  002D  3443               	retlw	67	;'C'
   357  002E  346F               	retlw	111	;'o'
   358  002F  346E               	retlw	110	;'n'
   359  0030  3466               	retlw	102	;'f'
   360  0031  3469               	retlw	105	;'i'
   361  0032  3467               	retlw	103	;'g'
   362  0033  3475               	retlw	117	;'u'
   363  0034  3472               	retlw	114	;'r'
   364  0035  3461               	retlw	97	;'a'
   365  0036  3472               	retlw	114	;'r'
   366  0037  3400               	retlw	0
   367  0038                     STR_3:
   368  0038  3444               	retlw	68	;'D'
   369  0039  3469               	retlw	105	;'i'
   370  003A  3467               	retlw	103	;'g'
   371  003B  3469               	retlw	105	;'i'
   372  003C  3474               	retlw	116	;'t'
   373  003D  3465               	retlw	101	;'e'
   374  003E  3420               	retlw	32	;' '
   375  003F  346F               	retlw	111	;'o'
   376  0040  3420               	retlw	32	;' '
   377  0041  3450               	retlw	80	;'P'
   378  0042  3449               	retlw	73	;'I'
   379  0043  344E               	retlw	78	;'N'
   380  0044  3420               	retlw	32	;' '
   381  0045  3465               	retlw	101	;'e'
   382  0046  3420               	retlw	32	;' '
   383  0047  3461               	retlw	97	;'a'
   384  0048  3470               	retlw	112	;'p'
   385  0049  3465               	retlw	101	;'e'
   386  004A  3472               	retlw	114	;'r'
   387  004B  3474               	retlw	116	;'t'
   388  004C  3465               	retlw	101	;'e'
   389  004D  3420               	retlw	32	;' '
   390  004E  3423               	retlw	35	;'#'
   391  004F  3400               	retlw	0
   392  0050                     STR_2:
   393  0050  3444               	retlw	68	;'D'
   394  0051  3469               	retlw	105	;'i'
   395  0052  3467               	retlw	103	;'g'
   396  0053  3469               	retlw	105	;'i'
   397  0054  3474               	retlw	116	;'t'
   398  0055  3465               	retlw	101	;'e'
   399  0056  3420               	retlw	32	;' '
   400  0057  346F               	retlw	111	;'o'
   401  0058  3420               	retlw	32	;' '
   402  0059  3449               	retlw	73	;'I'
   403  005A  3444               	retlw	68	;'D'
   404  005B  3420               	retlw	32	;' '
   405  005C  3465               	retlw	101	;'e'
   406  005D  3420               	retlw	32	;' '
   407  005E  3461               	retlw	97	;'a'
   408  005F  3470               	retlw	112	;'p'
   409  0060  3465               	retlw	101	;'e'
   410  0061  3472               	retlw	114	;'r'
   411  0062  3474               	retlw	116	;'t'
   412  0063  3465               	retlw	101	;'e'
   413  0064  3420               	retlw	32	;' '
   414  0065  3423               	retlw	35	;'#'
   415  0066  3400               	retlw	0
   416  0067                     STR_4:
   417  0067  3441               	retlw	65	;'A'
   418  0068  3463               	retlw	99	;'c'
   419  0069  3465               	retlw	101	;'e'
   420  006A  3473               	retlw	115	;'s'
   421  006B  3473               	retlw	115	;'s'
   422  006C  346F               	retlw	111	;'o'
   423  006D  3420               	retlw	32	;' '
   424  006E  3470               	retlw	112	;'p'
   425  006F  3465               	retlw	101	;'e'
   426  0070  3472               	retlw	114	;'r'
   427  0071  346D               	retlw	109	;'m'
   428  0072  3469               	retlw	105	;'i'
   429  0073  3474               	retlw	116	;'t'
   430  0074  3469               	retlw	105	;'i'
   431  0075  3464               	retlw	100	;'d'
   432  0076  346F               	retlw	111	;'o'
   433  0077  3421               	retlw	33	;'!'
   434  0078  3400               	retlw	0
   435  0079                     STR_5:
   436  0079  3441               	retlw	65	;'A'
   437  007A  3463               	retlw	99	;'c'
   438  007B  3465               	retlw	101	;'e'
   439  007C  3473               	retlw	115	;'s'
   440  007D  3473               	retlw	115	;'s'
   441  007E  346F               	retlw	111	;'o'
   442  007F  3420               	retlw	32	;' '
   443  0080  344E               	retlw	78	;'N'
   444  0081  3465               	retlw	101	;'e'
   445  0082  3467               	retlw	103	;'g'
   446  0083  3461               	retlw	97	;'a'
   447  0084  3464               	retlw	100	;'d'
   448  0085  346F               	retlw	111	;'o'
   449  0086  3421               	retlw	33	;'!'
   450  0087  3400               	retlw	0
   451                           
   452                           	psect	cinit
   453  07FE                     start_initialization:	
   454                           ; #config settings
   455                           
   456  07FE                     __initialization:
   457  07FE                     end_of_initialization:	
   458                           ;End of C runtime variable initialization code
   459                           
   460  07FE                     __end_of__initialization:
   461  07FE  0183               	clrf	3
   462  07FF  2EAB               	ljmp	_main	;jump to C main() function
   463                           
   464                           	psect	cstackCOMMON
   465  0070                     __pcstackCOMMON:
   466  0070                     ?_eeprom_read:
   467  0070                     ??_eeprom_read:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_eeprom_write:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_exibirMensagemAcessoNegado:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_lcd_wr:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ??_lcd_wr:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_lcd_cmd:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_lcd_dat:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_lcd_init:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_lcd_str:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_main:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?___bmul:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     eeprom_write@value:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ___bmul@multiplicand:	
   504                           ; 1 bytes @ 0x0
   505                           
   506                           
   507                           ; 1 bytes @ 0x0
   508  0070                     	ds	1
   509  0071                     ??_eeprom_write:
   510  0071                     ??___bmul:	
   511                           ; 1 bytes @ 0x1
   512                           
   513  0071                     lcd_wr@val:	
   514                           ; 1 bytes @ 0x1
   515                           
   516  0071                     eeprom_read@addr:	
   517                           ; 1 bytes @ 0x1
   518                           
   519                           
   520                           ; 1 bytes @ 0x1
   521  0071                     	ds	1
   522  0072                     lcd_wr@i:
   523  0072                     eeprom_write@addr:	
   524                           ; 1 bytes @ 0x2
   525                           
   526  0072                     ___bmul@product:	
   527                           ; 1 bytes @ 0x2
   528                           
   529                           
   530                           ; 1 bytes @ 0x2
   531  0072                     	ds	1
   532  0073                     ??_lcd_cmd:
   533  0073                     ??_lcd_dat:	
   534                           ; 1 bytes @ 0x3
   535                           
   536  0073                     ___bmul@multiplier:	
   537                           ; 1 bytes @ 0x3
   538                           
   539                           
   540                           ; 1 bytes @ 0x3
   541  0073                     	ds	1
   542  0074                     ?_tc_tecla:
   543  0074                     tc_tecla@timeout:	
   544                           ; 1 bytes @ 0x4
   545                           
   546                           
   547                           ; 2 bytes @ 0x4
   548  0074                     	ds	1
   549  0075                     lcd_cmd@val:
   550  0075                     lcd_dat@val:	
   551                           ; 1 bytes @ 0x5
   552                           
   553                           
   554                           ; 1 bytes @ 0x5
   555  0075                     	ds	1
   556  0076                     ??_lcd_init:
   557  0076                     ??_lcd_str:	
   558                           ; 1 bytes @ 0x6
   559                           
   560  0076                     ??_tc_tecla:	
   561                           ; 1 bytes @ 0x6
   562                           
   563                           
   564                           ; 1 bytes @ 0x6
   565  0076                     	ds	1
   566  0077                     lcd_str@i:
   567                           
   568                           ; 1 bytes @ 0x7
   569  0077                     	ds	1
   570  0078                     lcd_str@str:
   571  0078                     tc_tecla@to:	
   572                           ; 1 bytes @ 0x8
   573                           
   574                           
   575                           ; 2 bytes @ 0x8
   576  0078                     	ds	1
   577  0079                     ??_exibirMensagemAcessoNegado:
   578                           
   579                           ; 1 bytes @ 0x9
   580  0079                     	ds	1
   581  007A                     tc_tecla@tmp:
   582                           
   583                           ; 1 bytes @ 0xA
   584  007A                     	ds	1
   585  007B                     tc_tecla@ret:
   586                           
   587                           ; 1 bytes @ 0xB
   588  007B                     	ds	1
   589  007C                     tc_tecla@i:
   590                           
   591                           ; 1 bytes @ 0xC
   592  007C                     	ds	1
   593  007D                     ??_main:
   594                           
   595                           ; 1 bytes @ 0xD
   596  007D                     	ds	1
   597                           
   598                           	psect	cstackBANK0
   599  0020                     __pcstackBANK0:
   600  0020                     main@infoDigitada:
   601                           
   602                           ; 1 bytes @ 0x0
   603  0020                     	ds	1
   604  0021                     main@countSimbolosId:
   605                           
   606                           ; 1 bytes @ 0x1
   607  0021                     	ds	1
   608  0022                     main@countSimbolosPin:
   609                           
   610                           ; 1 bytes @ 0x2
   611  0022                     	ds	1
   612  0023                     main@initTimerDisplayMessageQ3:
   613                           
   614                           ; 1 bytes @ 0x3
   615  0023                     	ds	1
   616  0024                     main@tecla:
   617                           
   618                           ; 1 bytes @ 0x4
   619  0024                     	ds	1
   620  0025                     main@countRecordedAccesses:
   621                           
   622                           ; 1 bytes @ 0x5
   623  0025                     	ds	1
   624  0026                     main@aux:
   625                           
   626                           ; 1 bytes @ 0x6
   627  0026                     	ds	1
   628  0027                     main@i:
   629                           
   630                           ; 1 bytes @ 0x7
   631  0027                     	ds	1
   632  0028                     main@j:
   633                           
   634                           ; 1 bytes @ 0x8
   635  0028                     	ds	1
   636                           
   637                           	psect	maintext
   638  06AB                     __pmaintext:	
   639 ;;
   640 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   641 ;;
   642 ;; *************** function _main *****************
   643 ;; Defined at:
   644 ;;		line 46 in file "main.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;		None
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  j               1    8[BANK0 ] unsigned char 
   649 ;;  aux             1    6[BANK0 ] unsigned char 
   650 ;;  simbolosPin     7    0        unsigned char [7]
   651 ;;  simbolosId      7    0        unsigned char [7]
   652 ;;  i               1    7[BANK0 ] unsigned char 
   653 ;;  countRecorde    1    5[BANK0 ] unsigned char 
   654 ;;  tecla           1    4[BANK0 ] unsigned char 
   655 ;;  initTimerDis    1    3[BANK0 ] unsigned char 
   656 ;;  countSimbolo    1    2[BANK0 ] unsigned char 
   657 ;;  countSimbolo    1    1[BANK0 ] unsigned char 
   658 ;;  infoDigitada    1    0[BANK0 ] unsigned char 
   659 ;;  modoOperacao    1    0        unsigned char 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : B00/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   669 ;;      Params:         0       0       0       0
   670 ;;      Locals:         0       9       0       0
   671 ;;      Temps:          1       0       0       0
   672 ;;      Totals:         1       9       0       0
   673 ;;Total ram usage:       10 bytes
   674 ;; Hardware stack levels required when called: 4
   675 ;; This function calls:
   676 ;;		_eeprom_read
   677 ;;		_eeprom_write
   678 ;;		_exibirMensagemAcessoNegado
   679 ;;		_lcd_dat
   680 ;;		_lcd_init
   681 ;;		_tc_tecla
   682 ;; This function is called by:
   683 ;;		Startup code after reset
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           
   688                           ;psect for function _main
   689  06AB                     _main:
   690  06AB                     l1267:	
   691                           ;incstack = 0
   692                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   693                           
   694                           
   695                           ;main.c: 48:     unsigned char tecla;;main.c: 49:     unsigned char infoDigitada = 0;
   696  06AB  1283               	bcf	3,5	;RP0=0, select bank0
   697  06AC  1303               	bcf	3,6	;RP1=0, select bank0
   698  06AD  01A0               	clrf	main@infoDigitada
   699                           
   700                           ;main.c: 50:     unsigned char simbolosId[7];;main.c: 51:     unsigned char countSimbolo
      +                          sId = 0;
   701  06AE  01A1               	clrf	main@countSimbolosId
   702                           
   703                           ;main.c: 52:     unsigned char simbolosPin[7];;main.c: 53:     unsigned char countSimbol
      +                          osPin = 0;
   704  06AF  01A2               	clrf	main@countSimbolosPin
   705                           
   706                           ;main.c: 54:     unsigned char initTimerDisplayMessageQ3 = 0;
   707  06B0  01A3               	clrf	main@initTimerDisplayMessageQ3
   708  06B1                     l1269:
   709                           
   710                           ;main.c: 55:     PCONbits.OSCF = 1;
   711  06B1  1683               	bsf	3,5	;RP0=1, select bank1
   712  06B2  1303               	bcf	3,6	;RP1=0, select bank1
   713  06B3  158E               	bsf	14,3	;volatile
   714  06B4                     l1271:
   715                           
   716                           ;main.c: 57:     CMCON = 0x07;
   717  06B4  3007               	movlw	7
   718  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   719  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   720  06B7  009F               	movwf	31	;volatile
   721  06B8                     l1273:
   722                           
   723                           ;main.c: 58:     TRISA = 0x30;
   724  06B8  3030               	movlw	48
   725  06B9  1683               	bsf	3,5	;RP0=1, select bank1
   726  06BA  1303               	bcf	3,6	;RP1=0, select bank1
   727  06BB  0085               	movwf	5	;volatile
   728  06BC                     l1275:
   729                           
   730                           ;main.c: 59:     TRISB = 0xE7;
   731  06BC  30E7               	movlw	231
   732  06BD  0086               	movwf	6	;volatile
   733  06BE                     l1277:
   734                           
   735                           ;main.c: 61:     PORTA = 0xFE;
   736  06BE  30FE               	movlw	254
   737  06BF  1283               	bcf	3,5	;RP0=0, select bank0
   738  06C0  1303               	bcf	3,6	;RP1=0, select bank0
   739  06C1  0085               	movwf	5	;volatile
   740                           
   741                           ;main.c: 62:     PORTB = 0x00;
   742  06C2  0186               	clrf	6	;volatile
   743  06C3                     l1279:
   744                           
   745                           ;main.c: 64:     lcd_init();
   746  06C3  267B               	fcall	_lcd_init
   747  06C4                     l1281:
   748                           
   749                           ;main.c: 67:     unsigned char countRecordedAccesses = eeprom_read(0);
   750  06C4  3000               	movlw	0
   751  06C5  25AB               	fcall	_eeprom_read
   752  06C6  00FD               	movwf	??_main
   753  06C7  087D               	movf	??_main,w
   754  06C8  1283               	bcf	3,5	;RP0=0, select bank0
   755  06C9  1303               	bcf	3,6	;RP1=0, select bank0
   756  06CA  00A5               	movwf	main@countRecordedAccesses
   757  06CB                     l1283:
   758                           
   759                           ;main.c: 70:     unsigned char i;;main.c: 71:     for(i=countRecordedAccesses; i<0xFF; i
      +                          ++){
   760  06CB  0825               	movf	main@countRecordedAccesses,w
   761  06CC  00FD               	movwf	??_main
   762  06CD  087D               	movf	??_main,w
   763  06CE  00A7               	movwf	main@i
   764  06CF                     l1285:
   765  06CF  0A27               	incf	main@i,w
   766  06D0  1D03               	btfss	3,2
   767  06D1  2ED3               	goto	u661
   768  06D2  2ED4               	goto	u660
   769  06D3                     u661:
   770  06D3  2ED5               	goto	l1289
   771  06D4                     u660:
   772  06D4  2EF7               	goto	l1303
   773  06D5                     l1289:
   774                           
   775                           ;main.c: 72:         unsigned char j;;main.c: 73:         for(j=0; j<8; j++){
   776  06D5  01A8               	clrf	main@j
   777  06D6                     l1295:
   778                           
   779                           ;main.c: 74:             eeprom_write(i*16 + j,0x00);
   780  06D6  01F0               	clrf	eeprom_write@value
   781  06D7  0827               	movf	main@i,w
   782  06D8  00FD               	movwf	??_main
   783  06D9  3004               	movlw	4
   784  06DA                     u675:
   785  06DA  1003               	clrc
   786  06DB  0DFD               	rlf	??_main,f
   787  06DC  3EFF               	addlw	-1
   788  06DD  1D03               	skipz
   789  06DE  2EDA               	goto	u675
   790  06DF  0828               	movf	main@j,w
   791  06E0  077D               	addwf	??_main,w
   792  06E1  2652               	fcall	_eeprom_write
   793  06E2                     l1297:
   794                           
   795                           ;main.c: 75:         }
   796  06E2  3001               	movlw	1
   797  06E3  00FD               	movwf	??_main
   798  06E4  087D               	movf	??_main,w
   799  06E5  1283               	bcf	3,5	;RP0=0, select bank0
   800  06E6  1303               	bcf	3,6	;RP1=0, select bank0
   801  06E7  07A8               	addwf	main@j,f
   802  06E8                     l1299:
   803  06E8  3008               	movlw	8
   804  06E9  0228               	subwf	main@j,w
   805  06EA  1C03               	skipc
   806  06EB  2EED               	goto	u681
   807  06EC  2EEE               	goto	u680
   808  06ED                     u681:
   809  06ED  2ED6               	goto	l1295
   810  06EE                     u680:
   811  06EE                     l1301:
   812                           
   813                           ;main.c: 76:     }
   814  06EE  3001               	movlw	1
   815  06EF  00FD               	movwf	??_main
   816  06F0  087D               	movf	??_main,w
   817  06F1  07A7               	addwf	main@i,f
   818  06F2  0A27               	incf	main@i,w
   819  06F3  1D03               	btfss	3,2
   820  06F4  2EF6               	goto	u691
   821  06F5  2EF7               	goto	u690
   822  06F6                     u691:
   823  06F6  2ED5               	goto	l1289
   824  06F7                     u690:
   825  06F7                     l1303:
   826                           
   827                           ;main.c: 94:         tecla = tc_tecla(5000);
   828  06F7  3088               	movlw	136
   829  06F8  00F4               	movwf	tc_tecla@timeout
   830  06F9  3013               	movlw	19
   831  06FA  00F5               	movwf	tc_tecla@timeout+1
   832  06FB  271F               	fcall	_tc_tecla
   833  06FC  00FD               	movwf	??_main
   834  06FD  087D               	movf	??_main,w
   835  06FE  1283               	bcf	3,5	;RP0=0, select bank0
   836  06FF  1303               	bcf	3,6	;RP1=0, select bank0
   837  0700  00A4               	movwf	main@tecla
   838  0701                     l1305:
   839                           
   840                           ;main.c: 95:         if(tecla == 42) {
   841  0701  302A               	movlw	42
   842  0702  0624               	xorwf	main@tecla,w
   843  0703  1D03               	btfss	3,2
   844  0704  2F06               	goto	u701
   845  0705  2F07               	goto	u700
   846  0706                     u701:
   847  0706  2F0F               	goto	l125
   848  0707                     u700:
   849  0707                     l1307:
   850                           
   851                           ;main.c: 96:             eeprom_write(0x00, 0x05);
   852  0707  3005               	movlw	5
   853  0708  00FD               	movwf	??_main
   854  0709  087D               	movf	??_main,w
   855  070A  00F0               	movwf	eeprom_write@value
   856  070B  3000               	movlw	0
   857  070C  2652               	fcall	_eeprom_write
   858                           
   859                           ;main.c: 97:             lcd_dat(0x2A);
   860  070D  302A               	movlw	42
   861  070E  2609               	fcall	_lcd_dat
   862  070F                     l125:	
   863                           ;main.c: 98:         }
   864                           
   865                           
   866                           ;main.c: 99:         unsigned char aux = eeprom_read(0x00);
   867  070F  3000               	movlw	0
   868  0710  25AB               	fcall	_eeprom_read
   869  0711  00FD               	movwf	??_main
   870  0712  087D               	movf	??_main,w
   871  0713  1283               	bcf	3,5	;RP0=0, select bank0
   872  0714  1303               	bcf	3,6	;RP1=0, select bank0
   873  0715  00A6               	movwf	main@aux
   874  0716                     l1309:
   875                           
   876                           ;main.c: 100:         if(aux == 0x05){
   877  0716  3005               	movlw	5
   878  0717  0626               	xorwf	main@aux,w
   879  0718  1D03               	btfss	3,2
   880  0719  2F1B               	goto	u711
   881  071A  2F1C               	goto	u710
   882  071B                     u711:
   883  071B  2EF7               	goto	l1303
   884  071C                     u710:
   885  071C                     l1311:
   886                           
   887                           ;main.c: 101:             exibirMensagemAcessoNegado();
   888  071C  25A2               	fcall	_exibirMensagemAcessoNegado
   889  071D  2EF7               	goto	l1303
   890  071E  2800               	ljmp	start
   891  071F                     __end_of_main:
   892                           
   893                           	psect	text1
   894  071F                     __ptext1:	
   895 ;; *************** function _tc_tecla *****************
   896 ;; Defined at:
   897 ;;		line 26 in file "teclado.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  timeout         2    4[COMMON] unsigned int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  to              2    8[COMMON] unsigned int 
   902 ;;  i               1   12[COMMON] unsigned char 
   903 ;;  ret             1   11[COMMON] unsigned char 
   904 ;;  tmp             1   10[COMMON] unsigned char 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      unsigned char 
   907 ;; Registers used:
   908 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   914 ;;      Params:         2       0       0       0
   915 ;;      Locals:         5       0       0       0
   916 ;;      Temps:          2       0       0       0
   917 ;;      Totals:         9       0       0       0
   918 ;;Total ram usage:        9 bytes
   919 ;; Hardware stack levels used: 1
   920 ;; Hardware stack levels required when called: 1
   921 ;; This function calls:
   922 ;;		___bmul
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           
   929                           ;psect for function _tc_tecla
   930  071F                     _tc_tecla:
   931  071F                     l1159:	
   932                           ;incstack = 0
   933                           ; Regs used in _tc_tecla: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   934                           
   935                           
   936                           ;teclado.c: 27:     unsigned int to = 0;
   937  071F  01F8               	clrf	tc_tecla@to
   938  0720  01F9               	clrf	tc_tecla@to+1
   939  0721                     l1161:
   940                           
   941                           ;teclado.c: 28:     unsigned char i;;teclado.c: 29:     unsigned char ret = 10;
   942  0721  300A               	movlw	10
   943  0722  00F6               	movwf	??_tc_tecla
   944  0723  0876               	movf	??_tc_tecla,w
   945  0724  00FB               	movwf	tc_tecla@ret
   946  0725                     l1163:
   947                           
   948                           ;teclado.c: 30:     unsigned char tmp = PORTA;
   949  0725  1283               	bcf	3,5	;RP0=0, select bank0
   950  0726  1303               	bcf	3,6	;RP1=0, select bank0
   951  0727  0805               	movf	5,w	;volatile
   952  0728  00F6               	movwf	??_tc_tecla
   953  0729  0876               	movf	??_tc_tecla,w
   954  072A  00FA               	movwf	tc_tecla@tmp
   955                           
   956                           ;teclado.c: 32:     while (((to < timeout) || (!timeout))&& (ret == 10)) {
   957  072B  2FE2               	goto	l43
   958  072C                     l1165:
   959                           
   960                           ;teclado.c: 33:         for (i = 0; i < 4; i++) {
   961  072C  01FC               	clrf	tc_tecla@i
   962  072D                     l1171:
   963                           
   964                           ;teclado.c: 34:             PORTA |= linha[i];
   965  072D  087C               	movf	tc_tecla@i,w
   966  072E  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
   967  072F  0084               	movwf	4
   968  0730  2001               	fcall	stringdir
   969  0731  00F6               	movwf	??_tc_tecla
   970  0732  0876               	movf	??_tc_tecla,w
   971  0733  1283               	bcf	3,5	;RP0=0, select bank0
   972  0734  1303               	bcf	3,6	;RP1=0, select bank0
   973  0735  0485               	iorwf	5,f	;volatile
   974  0736                     l1173:
   975                           
   976                           ;teclado.c: 36:             if (RB7) {
   977  0736  1F86               	btfss	6,7	;volatile
   978  0737  2F39               	goto	u461
   979  0738  2F3A               	goto	u460
   980  0739                     u461:
   981  0739  2F66               	goto	l47
   982  073A                     u460:
   983  073A                     l1175:
   984                           
   985                           ;teclado.c: 37:                 _delay((unsigned long)((20)*(4000000/4000.0)));
   986  073A  301A               	movlw	26
   987  073B  00F7               	movwf	??_tc_tecla+1
   988  073C  30F8               	movlw	248
   989  073D  00F6               	movwf	??_tc_tecla
   990  073E                     u767:
   991  073E  0BF6               	decfsz	??_tc_tecla,f
   992  073F  2F3E               	goto	u767
   993  0740  0BF7               	decfsz	??_tc_tecla+1,f
   994  0741  2F3E               	goto	u767
   995  0742  0000               	nop
   996  0743                     l1177:
   997                           
   998                           ;teclado.c: 38:                 if (RB7) {
   999  0743  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0744  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0745  1F86               	btfss	6,7	;volatile
  1002  0746  2F48               	goto	u471
  1003  0747  2F49               	goto	u470
  1004  0748                     u471:
  1005  0748  2F66               	goto	l47
  1006  0749                     u470:
  1007  0749  2F5F               	goto	l1187
  1008  074A                     l1181:
  1009                           
  1010                           ;teclado.c: 40:                         if (i == 3) {
  1011  074A  3003               	movlw	3
  1012  074B  067C               	xorwf	tc_tecla@i,w
  1013  074C  1D03               	btfss	3,2
  1014  074D  2F4F               	goto	u481
  1015  074E  2F50               	goto	u480
  1016  074F                     u481:
  1017  074F  2F55               	goto	l1185
  1018  0750                     u480:
  1019  0750                     l1183:
  1020                           
  1021                           ;teclado.c: 41:                             ret = 42;
  1022  0750  302A               	movlw	42
  1023  0751  00F6               	movwf	??_tc_tecla
  1024  0752  0876               	movf	??_tc_tecla,w
  1025  0753  00FB               	movwf	tc_tecla@ret
  1026                           
  1027                           ;teclado.c: 42:                         } else {
  1028  0754  2F5F               	goto	l1187
  1029  0755                     l1185:
  1030                           
  1031                           ;teclado.c: 43:                             ret = 1 + (i * 3);
  1032  0755  3003               	movlw	3
  1033  0756  00F6               	movwf	??_tc_tecla
  1034  0757  0876               	movf	??_tc_tecla,w
  1035  0758  00F0               	movwf	___bmul@multiplicand
  1036  0759  087C               	movf	tc_tecla@i,w
  1037  075A  25BC               	fcall	___bmul
  1038  075B  3E01               	addlw	1
  1039  075C  00F7               	movwf	??_tc_tecla+1
  1040  075D  0877               	movf	??_tc_tecla+1,w
  1041  075E  00FB               	movwf	tc_tecla@ret
  1042  075F                     l1187:
  1043                           
  1044                           ;teclado.c: 39:                     while (RB7){
  1045  075F  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0760  1303               	bcf	3,6	;RP1=0, select bank0
  1047  0761  1B86               	btfsc	6,7	;volatile
  1048  0762  2F64               	goto	u491
  1049  0763  2F65               	goto	u490
  1050  0764                     u491:
  1051  0764  2F4A               	goto	l1181
  1052  0765                     u490:
  1053  0765  2FD3               	goto	l1221
  1054  0766                     l47:	
  1055                           ;teclado.c: 48:             }
  1056                           
  1057                           
  1058                           ;teclado.c: 50:             if (RB6) {
  1059  0766  1F06               	btfss	6,6	;volatile
  1060  0767  2F69               	goto	u501
  1061  0768  2F6A               	goto	u500
  1062  0769                     u501:
  1063  0769  2F91               	goto	l54
  1064  076A                     u500:
  1065  076A                     l1189:
  1066                           
  1067                           ;teclado.c: 51:                 _delay((unsigned long)((20)*(4000000/4000.0)));
  1068  076A  301A               	movlw	26
  1069  076B  00F7               	movwf	??_tc_tecla+1
  1070  076C  30F8               	movlw	248
  1071  076D  00F6               	movwf	??_tc_tecla
  1072  076E                     u777:
  1073  076E  0BF6               	decfsz	??_tc_tecla,f
  1074  076F  2F6E               	goto	u777
  1075  0770  0BF7               	decfsz	??_tc_tecla+1,f
  1076  0771  2F6E               	goto	u777
  1077  0772  0000               	nop
  1078  0773                     l1191:
  1079                           
  1080                           ;teclado.c: 52:                 if (RB6) {
  1081  0773  1283               	bcf	3,5	;RP0=0, select bank0
  1082  0774  1303               	bcf	3,6	;RP1=0, select bank0
  1083  0775  1F06               	btfss	6,6	;volatile
  1084  0776  2F78               	goto	u511
  1085  0777  2F79               	goto	u510
  1086  0778                     u511:
  1087  0778  2F91               	goto	l54
  1088  0779                     u510:
  1089  0779  2F8A               	goto	l1199
  1090  077A                     l1195:
  1091                           
  1092                           ;teclado.c: 54:                         if (i != 3){
  1093  077A  3003               	movlw	3
  1094  077B  067C               	xorwf	tc_tecla@i,w
  1095  077C  1903               	btfsc	3,2
  1096  077D  2F7F               	goto	u521
  1097  077E  2F80               	goto	u520
  1098  077F                     u521:
  1099  077F  2F8A               	goto	l1199
  1100  0780                     u520:
  1101  0780                     l1197:
  1102                           
  1103                           ;teclado.c: 55:                             ret = 2 + (i * 3);
  1104  0780  3003               	movlw	3
  1105  0781  00F6               	movwf	??_tc_tecla
  1106  0782  0876               	movf	??_tc_tecla,w
  1107  0783  00F0               	movwf	___bmul@multiplicand
  1108  0784  087C               	movf	tc_tecla@i,w
  1109  0785  25BC               	fcall	___bmul
  1110  0786  3E02               	addlw	2
  1111  0787  00F7               	movwf	??_tc_tecla+1
  1112  0788  0877               	movf	??_tc_tecla+1,w
  1113  0789  00FB               	movwf	tc_tecla@ret
  1114  078A                     l1199:
  1115                           
  1116                           ;teclado.c: 53:                     while (RB6) {
  1117  078A  1283               	bcf	3,5	;RP0=0, select bank0
  1118  078B  1303               	bcf	3,6	;RP1=0, select bank0
  1119  078C  1B06               	btfsc	6,6	;volatile
  1120  078D  2F8F               	goto	u531
  1121  078E  2F90               	goto	u530
  1122  078F                     u531:
  1123  078F  2F7A               	goto	l1195
  1124  0790                     u530:
  1125  0790  2FD3               	goto	l1221
  1126  0791                     l54:	
  1127                           ;teclado.c: 61:             }
  1128                           
  1129                           
  1130                           ;teclado.c: 63:             if (RB5) {
  1131  0791  1E86               	btfss	6,5	;volatile
  1132  0792  2F94               	goto	u541
  1133  0793  2F95               	goto	u540
  1134  0794                     u541:
  1135  0794  2FC1               	goto	l1215
  1136  0795                     u540:
  1137  0795                     l1201:
  1138                           
  1139                           ;teclado.c: 64:                 _delay((unsigned long)((20)*(4000000/4000.0)));
  1140  0795  301A               	movlw	26
  1141  0796  00F7               	movwf	??_tc_tecla+1
  1142  0797  30F8               	movlw	248
  1143  0798  00F6               	movwf	??_tc_tecla
  1144  0799                     u787:
  1145  0799  0BF6               	decfsz	??_tc_tecla,f
  1146  079A  2F99               	goto	u787
  1147  079B  0BF7               	decfsz	??_tc_tecla+1,f
  1148  079C  2F99               	goto	u787
  1149  079D  0000               	nop
  1150  079E                     l1203:
  1151                           
  1152                           ;teclado.c: 65:                 if (RB5) {
  1153  079E  1283               	bcf	3,5	;RP0=0, select bank0
  1154  079F  1303               	bcf	3,6	;RP1=0, select bank0
  1155  07A0  1E86               	btfss	6,5	;volatile
  1156  07A1  2FA3               	goto	u551
  1157  07A2  2FA4               	goto	u550
  1158  07A3                     u551:
  1159  07A3  2FC1               	goto	l1215
  1160  07A4                     u550:
  1161  07A4  2FBA               	goto	l1213
  1162  07A5                     l1207:
  1163                           
  1164                           ;teclado.c: 67:                         if(i == 3){
  1165  07A5  3003               	movlw	3
  1166  07A6  067C               	xorwf	tc_tecla@i,w
  1167  07A7  1D03               	btfss	3,2
  1168  07A8  2FAA               	goto	u561
  1169  07A9  2FAB               	goto	u560
  1170  07AA                     u561:
  1171  07AA  2FB0               	goto	l1211
  1172  07AB                     u560:
  1173  07AB                     l1209:
  1174                           
  1175                           ;teclado.c: 68:                             ret = 35;
  1176  07AB  3023               	movlw	35
  1177  07AC  00F6               	movwf	??_tc_tecla
  1178  07AD  0876               	movf	??_tc_tecla,w
  1179  07AE  00FB               	movwf	tc_tecla@ret
  1180                           
  1181                           ;teclado.c: 69:                         } else {
  1182  07AF  2FBA               	goto	l1213
  1183  07B0                     l1211:
  1184                           
  1185                           ;teclado.c: 70:                             ret = 3 + (i * 3);
  1186  07B0  3003               	movlw	3
  1187  07B1  00F6               	movwf	??_tc_tecla
  1188  07B2  0876               	movf	??_tc_tecla,w
  1189  07B3  00F0               	movwf	___bmul@multiplicand
  1190  07B4  087C               	movf	tc_tecla@i,w
  1191  07B5  25BC               	fcall	___bmul
  1192  07B6  3E03               	addlw	3
  1193  07B7  00F7               	movwf	??_tc_tecla+1
  1194  07B8  0877               	movf	??_tc_tecla+1,w
  1195  07B9  00FB               	movwf	tc_tecla@ret
  1196  07BA                     l1213:
  1197                           
  1198                           ;teclado.c: 66:                     while (RB5) {
  1199  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1200  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1201  07BC  1A86               	btfsc	6,5	;volatile
  1202  07BD  2FBF               	goto	u571
  1203  07BE  2FC0               	goto	u570
  1204  07BF                     u571:
  1205  07BF  2FA5               	goto	l1207
  1206  07C0                     u570:
  1207  07C0  2FD3               	goto	l1221
  1208  07C1                     l1215:
  1209                           
  1210                           ;teclado.c: 78:             PORTA &= ~linha[i];
  1211  07C1  087C               	movf	tc_tecla@i,w
  1212  07C2  3E01               	addlw	low ((_linha-__stringbase)| (0+32768))
  1213  07C3  0084               	movwf	4
  1214  07C4  2001               	fcall	stringdir
  1215  07C5  3AFF               	xorlw	255
  1216  07C6  00F6               	movwf	??_tc_tecla
  1217  07C7  0876               	movf	??_tc_tecla,w
  1218  07C8  0585               	andwf	5,f	;volatile
  1219  07C9                     l1217:
  1220                           
  1221                           ;teclado.c: 79:         }
  1222  07C9  3001               	movlw	1
  1223  07CA  00F6               	movwf	??_tc_tecla
  1224  07CB  0876               	movf	??_tc_tecla,w
  1225  07CC  07FC               	addwf	tc_tecla@i,f
  1226  07CD                     l1219:
  1227  07CD  3004               	movlw	4
  1228  07CE  027C               	subwf	tc_tecla@i,w
  1229  07CF  1C03               	skipc
  1230  07D0  2FD2               	goto	u581
  1231  07D1  2FD3               	goto	u580
  1232  07D2                     u581:
  1233  07D2  2F2D               	goto	l1171
  1234  07D3                     u580:
  1235  07D3                     l1221:
  1236                           
  1237                           ;teclado.c: 80:         _delay((unsigned long)((20)*(4000000/4000.0)));
  1238  07D3  301A               	movlw	26
  1239  07D4  00F7               	movwf	??_tc_tecla+1
  1240  07D5  30F8               	movlw	248
  1241  07D6  00F6               	movwf	??_tc_tecla
  1242  07D7                     u797:
  1243  07D7  0BF6               	decfsz	??_tc_tecla,f
  1244  07D8  2FD7               	goto	u797
  1245  07D9  0BF7               	decfsz	??_tc_tecla+1,f
  1246  07DA  2FD7               	goto	u797
  1247  07DB  0000               	nop
  1248                           
  1249                           ;teclado.c: 81:         to += 5;
  1250  07DC  3005               	movlw	5
  1251  07DD  07F8               	addwf	tc_tecla@to,f
  1252  07DE  1803               	skipnc
  1253  07DF  0AF9               	incf	tc_tecla@to+1,f
  1254  07E0  3000               	movlw	0
  1255  07E1  07F9               	addwf	tc_tecla@to+1,f
  1256  07E2                     l43:	
  1257                           ;teclado.c: 82:     }
  1258                           
  1259                           
  1260                           ;teclado.c: 32:     while (((to < timeout) || (!timeout))&& (ret == 10)) {
  1261  07E2  0875               	movf	tc_tecla@timeout+1,w
  1262  07E3  0279               	subwf	tc_tecla@to+1,w
  1263  07E4  1D03               	skipz
  1264  07E5  2FE8               	goto	u595
  1265  07E6  0874               	movf	tc_tecla@timeout,w
  1266  07E7  0278               	subwf	tc_tecla@to,w
  1267  07E8                     u595:
  1268  07E8  1C03               	skipc
  1269  07E9  2FEB               	goto	u591
  1270  07EA  2FEC               	goto	u590
  1271  07EB                     u591:
  1272  07EB  2FF2               	goto	l1225
  1273  07EC                     u590:
  1274  07EC                     l1223:
  1275  07EC  0874               	movf	tc_tecla@timeout,w
  1276  07ED  0475               	iorwf	tc_tecla@timeout+1,w
  1277  07EE  1D03               	btfss	3,2
  1278  07EF  2FF1               	goto	u601
  1279  07F0  2FF2               	goto	u600
  1280  07F1                     u601:
  1281  07F1  2FF8               	goto	l1227
  1282  07F2                     u600:
  1283  07F2                     l1225:
  1284  07F2  300A               	movlw	10
  1285  07F3  067B               	xorwf	tc_tecla@ret,w
  1286  07F4  1903               	btfsc	3,2
  1287  07F5  2FF7               	goto	u611
  1288  07F6  2FF8               	goto	u610
  1289  07F7                     u611:
  1290  07F7  2F2C               	goto	l1165
  1291  07F8                     u610:
  1292  07F8                     l1227:
  1293                           
  1294                           ;teclado.c: 85:     PORTA = tmp;
  1295  07F8  087A               	movf	tc_tecla@tmp,w
  1296  07F9  1283               	bcf	3,5	;RP0=0, select bank0
  1297  07FA  1303               	bcf	3,6	;RP1=0, select bank0
  1298  07FB  0085               	movwf	5	;volatile
  1299                           
  1300                           ;teclado.c: 86:     return ret;
  1301  07FC  087B               	movf	tc_tecla@ret,w
  1302  07FD                     l72:
  1303  07FD  0008               	return
  1304  07FE                     __end_of_tc_tecla:
  1305                           
  1306                           	psect	text2
  1307  05BC                     __ptext2:	
  1308 ;; *************** function ___bmul *****************
  1309 ;; Defined at:
  1310 ;;		line 4 in file "D:\program files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  multiplier      1    wreg     unsigned char 
  1313 ;;  multiplicand    1    0[COMMON] unsigned char 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  multiplier      1    3[COMMON] unsigned char 
  1316 ;;  product         1    2[COMMON] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      unsigned char 
  1319 ;; Registers used:
  1320 ;;		wreg, status,2, status,0
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1326 ;;      Params:         1       0       0       0
  1327 ;;      Locals:         2       0       0       0
  1328 ;;      Temps:          1       0       0       0
  1329 ;;      Totals:         4       0       0       0
  1330 ;;Total ram usage:        4 bytes
  1331 ;; Hardware stack levels used: 1
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_tc_tecla
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function ___bmul
  1341  05BC                     ___bmul:
  1342                           
  1343                           ;incstack = 0
  1344                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1345                           ;___bmul@multiplier stored from wreg
  1346  05BC  00F3               	movwf	___bmul@multiplier
  1347  05BD                     l1121:
  1348  05BD  01F2               	clrf	___bmul@product
  1349  05BE                     l1123:
  1350  05BE  1C73               	btfss	___bmul@multiplier,0
  1351  05BF  2DC1               	goto	u441
  1352  05C0  2DC2               	goto	u440
  1353  05C1                     u441:
  1354  05C1  2DC6               	goto	l1127
  1355  05C2                     u440:
  1356  05C2                     l1125:
  1357  05C2  0870               	movf	___bmul@multiplicand,w
  1358  05C3  00F1               	movwf	??___bmul
  1359  05C4  0871               	movf	??___bmul,w
  1360  05C5  07F2               	addwf	___bmul@product,f
  1361  05C6                     l1127:
  1362  05C6  1003               	clrc
  1363  05C7  0DF0               	rlf	___bmul@multiplicand,f
  1364  05C8                     l1129:
  1365  05C8  1003               	clrc
  1366  05C9  0CF3               	rrf	___bmul@multiplier,f
  1367  05CA  0873               	movf	___bmul@multiplier,w
  1368  05CB  1D03               	btfss	3,2
  1369  05CC  2DCE               	goto	u451
  1370  05CD  2DCF               	goto	u450
  1371  05CE                     u451:
  1372  05CE  2DBE               	goto	l1123
  1373  05CF                     u450:
  1374  05CF                     l1131:
  1375  05CF  0872               	movf	___bmul@product,w
  1376  05D0                     l305:
  1377  05D0  0008               	return
  1378  05D1                     __end_of___bmul:
  1379                           
  1380                           	psect	text3
  1381  067B                     __ptext3:	
  1382 ;; *************** function _lcd_init *****************
  1383 ;; Defined at:
  1384 ;;		line 60 in file "lcd.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0, pclath, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1398 ;;      Params:         0       0       0       0
  1399 ;;      Locals:         0       0       0       0
  1400 ;;      Temps:          2       0       0       0
  1401 ;;      Totals:         2       0       0       0
  1402 ;;Total ram usage:        2 bytes
  1403 ;; Hardware stack levels used: 1
  1404 ;; Hardware stack levels required when called: 2
  1405 ;; This function calls:
  1406 ;;		_lcd_cmd
  1407 ;; This function is called by:
  1408 ;;		_main
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _lcd_init
  1414  067B                     _lcd_init:
  1415  067B                     l1135:	
  1416                           ;incstack = 0
  1417                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1418                           
  1419                           
  1420                           ;lcd.c: 62:  RA0=0;
  1421  067B  1283               	bcf	3,5	;RP0=0, select bank0
  1422  067C  1303               	bcf	3,6	;RP1=0, select bank0
  1423  067D  1005               	bcf	5,0	;volatile
  1424                           
  1425                           ;lcd.c: 63:  RB3=0;
  1426  067E  1186               	bcf	6,3	;volatile
  1427  067F                     l1137:
  1428                           
  1429                           ;lcd.c: 64:  _delay((unsigned long)((20)*(4000000/4000.0)));
  1430  067F  301A               	movlw	26
  1431  0680  00F7               	movwf	??_lcd_init+1
  1432  0681  30F8               	movlw	248
  1433  0682  00F6               	movwf	??_lcd_init
  1434  0683                     u807:
  1435  0683  0BF6               	decfsz	??_lcd_init,f
  1436  0684  2E83               	goto	u807
  1437  0685  0BF7               	decfsz	??_lcd_init+1,f
  1438  0686  2E83               	goto	u807
  1439  0687  0000               	nop
  1440  0688                     l1139:
  1441                           
  1442                           ;lcd.c: 65:  RA0=1;
  1443  0688  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0689  1303               	bcf	3,6	;RP1=0, select bank0
  1445  068A  1405               	bsf	5,0	;volatile
  1446  068B                     l1141:
  1447                           
  1448                           ;lcd.c: 67:  lcd_cmd(0x30);
  1449  068B  3030               	movlw	48
  1450  068C  25E7               	fcall	_lcd_cmd
  1451  068D                     l1143:
  1452                           
  1453                           ;lcd.c: 68:  _delay((unsigned long)((5)*(4000000/4000.0)));
  1454  068D  3007               	movlw	7
  1455  068E  00F7               	movwf	??_lcd_init+1
  1456  068F  307D               	movlw	125
  1457  0690  00F6               	movwf	??_lcd_init
  1458  0691                     u817:
  1459  0691  0BF6               	decfsz	??_lcd_init,f
  1460  0692  2E91               	goto	u817
  1461  0693  0BF7               	decfsz	??_lcd_init+1,f
  1462  0694  2E91               	goto	u817
  1463                           
  1464                           ;lcd.c: 69:  lcd_cmd(0x30);
  1465  0695  3030               	movlw	48
  1466  0696  25E7               	fcall	_lcd_cmd
  1467  0697                     l1145:
  1468                           
  1469                           ;lcd.c: 70:     _delay((unsigned long)((1)*(4000000/4000.0)));
  1470  0697  30C7               	movlw	199
  1471  0698  00F6               	movwf	??_lcd_init
  1472  0699                     u827:
  1473  0699  2E9A               	nop2
  1474  069A  0BF6               	decfsz	??_lcd_init,f
  1475  069B  2E99               	goto	u827
  1476  069C  2E9D               	nop2
  1477  069D  2E9E               	nop2
  1478  069E                     l1147:
  1479                           
  1480                           ;lcd.c: 71:  lcd_cmd(0x38);
  1481  069E  3038               	movlw	56
  1482  069F  25E7               	fcall	_lcd_cmd
  1483  06A0                     l1149:
  1484                           
  1485                           ;lcd.c: 72:  lcd_cmd(0x08);
  1486  06A0  3008               	movlw	8
  1487  06A1  25E7               	fcall	_lcd_cmd
  1488  06A2                     l1151:
  1489                           
  1490                           ;lcd.c: 73:  lcd_cmd(0x0F);
  1491  06A2  300F               	movlw	15
  1492  06A3  25E7               	fcall	_lcd_cmd
  1493  06A4                     l1153:
  1494                           
  1495                           ;lcd.c: 74:  lcd_cmd(0x01);
  1496  06A4  3001               	movlw	1
  1497  06A5  25E7               	fcall	_lcd_cmd
  1498  06A6                     l1155:
  1499                           
  1500                           ;lcd.c: 75:  lcd_cmd(0x38);
  1501  06A6  3038               	movlw	56
  1502  06A7  25E7               	fcall	_lcd_cmd
  1503  06A8                     l1157:
  1504                           
  1505                           ;lcd.c: 76:     lcd_cmd(0x80);
  1506  06A8  3080               	movlw	128
  1507  06A9  25E7               	fcall	_lcd_cmd
  1508  06AA                     l22:
  1509  06AA  0008               	return
  1510  06AB                     __end_of_lcd_init:
  1511                           
  1512                           	psect	text4
  1513  05A2                     __ptext4:	
  1514 ;; *************** function _exibirMensagemAcessoNegado *****************
  1515 ;; Defined at:
  1516 ;;		line 35 in file "func.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1530 ;;      Params:         0       0       0       0
  1531 ;;      Locals:         0       0       0       0
  1532 ;;      Temps:          0       0       0       0
  1533 ;;      Totals:         0       0       0       0
  1534 ;;Total ram usage:        0 bytes
  1535 ;; Hardware stack levels used: 1
  1536 ;; Hardware stack levels required when called: 3
  1537 ;; This function calls:
  1538 ;;		_lcd_cmd
  1539 ;;		_lcd_str
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           
  1546                           ;psect for function _exibirMensagemAcessoNegado
  1547  05A2                     _exibirMensagemAcessoNegado:
  1548  05A2                     l1255:	
  1549                           ;incstack = 0
  1550                           ; Regs used in _exibirMensagemAcessoNegado: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1551                           
  1552                           
  1553                           ;func.c: 36:     lcd_cmd(0x01);
  1554  05A2  3001               	movlw	1
  1555  05A3  25E7               	fcall	_lcd_cmd
  1556                           
  1557                           ;func.c: 37:     lcd_cmd(0x80);
  1558  05A4  3080               	movlw	128
  1559  05A5  25E7               	fcall	_lcd_cmd
  1560                           
  1561                           ;func.c: 38:     lcd_cmd(0x01);
  1562  05A6  3001               	movlw	1
  1563  05A7  25E7               	fcall	_lcd_cmd
  1564  05A8                     l1257:
  1565                           
  1566                           ;func.c: 39:     lcd_str("Acesso Negado!");
  1567  05A8  3073               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1568  05A9  25D1               	fcall	_lcd_str
  1569  05AA                     l148:
  1570  05AA  0008               	return
  1571  05AB                     __end_of_exibirMensagemAcessoNegado:
  1572                           
  1573                           	psect	text5
  1574  05D1                     __ptext5:	
  1575 ;; *************** function _lcd_str *****************
  1576 ;; Defined at:
  1577 ;;		line 79 in file "lcd.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  str             1    wreg     PTR const unsigned char 
  1580 ;;		 -> STR_5(15), STR_4(18), STR_3(24), STR_2(23), 
  1581 ;;		 -> STR_1(45), 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  str             1    8[COMMON] PTR const unsigned char 
  1584 ;;		 -> STR_5(15), STR_4(18), STR_3(24), STR_2(23), 
  1585 ;;		 -> STR_1(45), 
  1586 ;;  i               1    7[COMMON] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1596 ;;      Params:         0       0       0       0
  1597 ;;      Locals:         2       0       0       0
  1598 ;;      Temps:          1       0       0       0
  1599 ;;      Totals:         3       0       0       0
  1600 ;;Total ram usage:        3 bytes
  1601 ;; Hardware stack levels used: 1
  1602 ;; Hardware stack levels required when called: 2
  1603 ;; This function calls:
  1604 ;;		_lcd_dat
  1605 ;; This function is called by:
  1606 ;;		_exibirMensagemAcessoNegado
  1607 ;;		_exibirMensagemInicial
  1608 ;;		_exibirMensagemDigitarId
  1609 ;;		_exibirMensagemDigitarPin
  1610 ;;		_exibirMensagemAcessoPermitido
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           
  1615                           ;psect for function _lcd_str
  1616  05D1                     _lcd_str:
  1617                           
  1618                           ;incstack = 0
  1619                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1620                           ;lcd_str@str stored from wreg
  1621  05D1  00F8               	movwf	lcd_str@str
  1622  05D2                     l1113:
  1623                           
  1624                           ;lcd.c: 79: void lcd_str(const char* str);lcd.c: 80: {;lcd.c: 81:  unsigned char i=0;
  1625  05D2  01F7               	clrf	lcd_str@i
  1626                           
  1627                           ;lcd.c: 83:  while(str[i])
  1628  05D3  2DDD               	goto	l1119
  1629  05D4                     l1115:
  1630                           
  1631                           ;lcd.c: 84:  {;lcd.c: 85:    lcd_dat(str[i]);
  1632  05D4  0877               	movf	lcd_str@i,w
  1633  05D5  0778               	addwf	lcd_str@str,w
  1634  05D6  0084               	movwf	4
  1635  05D7  2001               	fcall	stringdir
  1636  05D8  2609               	fcall	_lcd_dat
  1637  05D9                     l1117:
  1638                           
  1639                           ;lcd.c: 86:    i++;
  1640  05D9  3001               	movlw	1
  1641  05DA  00F6               	movwf	??_lcd_str
  1642  05DB  0876               	movf	??_lcd_str,w
  1643  05DC  07F7               	addwf	lcd_str@i,f
  1644  05DD                     l1119:
  1645                           
  1646                           ;lcd.c: 83:  while(str[i])
  1647  05DD  0877               	movf	lcd_str@i,w
  1648  05DE  0778               	addwf	lcd_str@str,w
  1649  05DF  0084               	movwf	4
  1650  05E0  2001               	fcall	stringdir
  1651  05E1  3A00               	xorlw	0
  1652  05E2  1D03               	skipz
  1653  05E3  2DE5               	goto	u431
  1654  05E4  2DE6               	goto	u430
  1655  05E5                     u431:
  1656  05E5  2DD4               	goto	l1115
  1657  05E6                     u430:
  1658  05E6                     l28:
  1659  05E6  0008               	return
  1660  05E7                     __end_of_lcd_str:
  1661                           
  1662                           	psect	text6
  1663  0609                     __ptext6:	
  1664 ;; *************** function _lcd_dat *****************
  1665 ;; Defined at:
  1666 ;;		line 49 in file "lcd.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  val             1    wreg     unsigned char 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  val             1    5[COMMON] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0, pclath, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1680 ;;      Params:         0       0       0       0
  1681 ;;      Locals:         1       0       0       0
  1682 ;;      Temps:          2       0       0       0
  1683 ;;      Totals:         3       0       0       0
  1684 ;;Total ram usage:        3 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 1
  1687 ;; This function calls:
  1688 ;;		_lcd_wr
  1689 ;; This function is called by:
  1690 ;;		_lcd_str
  1691 ;;		_main
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _lcd_dat
  1697  0609                     _lcd_dat:
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _lcd_dat: [wreg+status,2+status,0+pclath+cstack]
  1701                           ;lcd_dat@val stored from wreg
  1702  0609  00F5               	movwf	lcd_dat@val
  1703  060A                     l1085:
  1704                           
  1705                           ;lcd.c: 49: void lcd_dat(unsigned char val);lcd.c: 50: {;lcd.c: 51:  RA0=1;
  1706  060A  1283               	bcf	3,5	;RP0=0, select bank0
  1707  060B  1303               	bcf	3,6	;RP1=0, select bank0
  1708  060C  1405               	bsf	5,0	;volatile
  1709  060D                     l1087:
  1710                           
  1711                           ;lcd.c: 52:         lcd_wr(val);
  1712  060D  0875               	movf	lcd_dat@val,w
  1713  060E  262B               	fcall	_lcd_wr
  1714  060F                     l1089:
  1715                           
  1716                           ;lcd.c: 53:         RB3=1;
  1717  060F  1283               	bcf	3,5	;RP0=0, select bank0
  1718  0610  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0611  1586               	bsf	6,3	;volatile
  1720  0612                     l1091:
  1721                           
  1722                           ;lcd.c: 54:         _delay((unsigned long)((3)*(4000000/4000.0)));
  1723  0612  3004               	movlw	4
  1724  0613  00F4               	movwf	??_lcd_dat+1
  1725  0614  30E4               	movlw	228
  1726  0615  00F3               	movwf	??_lcd_dat
  1727  0616                     u837:
  1728  0616  0BF3               	decfsz	??_lcd_dat,f
  1729  0617  2E16               	goto	u837
  1730  0618  0BF4               	decfsz	??_lcd_dat+1,f
  1731  0619  2E16               	goto	u837
  1732  061A  0000               	nop
  1733  061B                     l1093:
  1734                           
  1735                           ;lcd.c: 55:         RA0=0;
  1736  061B  1283               	bcf	3,5	;RP0=0, select bank0
  1737  061C  1303               	bcf	3,6	;RP1=0, select bank0
  1738  061D  1005               	bcf	5,0	;volatile
  1739  061E                     l1095:
  1740                           
  1741                           ;lcd.c: 56:         _delay((unsigned long)((3)*(4000000/4000.0)));
  1742  061E  3004               	movlw	4
  1743  061F  00F4               	movwf	??_lcd_dat+1
  1744  0620  30E4               	movlw	228
  1745  0621  00F3               	movwf	??_lcd_dat
  1746  0622                     u847:
  1747  0622  0BF3               	decfsz	??_lcd_dat,f
  1748  0623  2E22               	goto	u847
  1749  0624  0BF4               	decfsz	??_lcd_dat+1,f
  1750  0625  2E22               	goto	u847
  1751  0626  0000               	nop
  1752  0627                     l1097:
  1753                           
  1754                           ;lcd.c: 57:  RA0=1;
  1755  0627  1283               	bcf	3,5	;RP0=0, select bank0
  1756  0628  1303               	bcf	3,6	;RP1=0, select bank0
  1757  0629  1405               	bsf	5,0	;volatile
  1758  062A                     l19:
  1759  062A  0008               	return
  1760  062B                     __end_of_lcd_dat:
  1761                           
  1762                           	psect	text7
  1763  05E7                     __ptext7:	
  1764 ;; *************** function _lcd_cmd *****************
  1765 ;; Defined at:
  1766 ;;		line 38 in file "lcd.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  val             1    wreg     unsigned char 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  val             1    5[COMMON] unsigned char 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, status,2, status,0, pclath, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1780 ;;      Params:         0       0       0       0
  1781 ;;      Locals:         1       0       0       0
  1782 ;;      Temps:          2       0       0       0
  1783 ;;      Totals:         3       0       0       0
  1784 ;;Total ram usage:        3 bytes
  1785 ;; Hardware stack levels used: 1
  1786 ;; Hardware stack levels required when called: 1
  1787 ;; This function calls:
  1788 ;;		_lcd_wr
  1789 ;; This function is called by:
  1790 ;;		_lcd_init
  1791 ;;		_exibirMensagemAcessoNegado
  1792 ;;		_exibirMensagemInicial
  1793 ;;		_exibirMensagemDigitarId
  1794 ;;		_exibirMensagemDigitarPin
  1795 ;;		_exibirMensagemAcessoPermitido
  1796 ;;		_Questao2
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           
  1801                           ;psect for function _lcd_cmd
  1802  05E7                     _lcd_cmd:
  1803                           
  1804                           ;incstack = 0
  1805                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  1806                           ;lcd_cmd@val stored from wreg
  1807  05E7  00F5               	movwf	lcd_cmd@val
  1808  05E8                     l1099:
  1809                           
  1810                           ;lcd.c: 38: void lcd_cmd(unsigned char val);lcd.c: 39: {;lcd.c: 40:  RA0=1;
  1811  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1812  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1813  05EA  1405               	bsf	5,0	;volatile
  1814  05EB                     l1101:
  1815                           
  1816                           ;lcd.c: 41:         lcd_wr(val);
  1817  05EB  0875               	movf	lcd_cmd@val,w
  1818  05EC  262B               	fcall	_lcd_wr
  1819  05ED                     l1103:
  1820                           
  1821                           ;lcd.c: 42:         RB3=0;
  1822  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1823  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1824  05EF  1186               	bcf	6,3	;volatile
  1825  05F0                     l1105:
  1826                           
  1827                           ;lcd.c: 43:         _delay((unsigned long)((3)*(4000000/4000.0)));
  1828  05F0  3004               	movlw	4
  1829  05F1  00F4               	movwf	??_lcd_cmd+1
  1830  05F2  30E4               	movlw	228
  1831  05F3  00F3               	movwf	??_lcd_cmd
  1832  05F4                     u857:
  1833  05F4  0BF3               	decfsz	??_lcd_cmd,f
  1834  05F5  2DF4               	goto	u857
  1835  05F6  0BF4               	decfsz	??_lcd_cmd+1,f
  1836  05F7  2DF4               	goto	u857
  1837  05F8  0000               	nop
  1838  05F9                     l1107:
  1839                           
  1840                           ;lcd.c: 44:         RA0=0;
  1841  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  1842  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  1843  05FB  1005               	bcf	5,0	;volatile
  1844  05FC                     l1109:
  1845                           
  1846                           ;lcd.c: 45:         _delay((unsigned long)((3)*(4000000/4000.0)));
  1847  05FC  3004               	movlw	4
  1848  05FD  00F4               	movwf	??_lcd_cmd+1
  1849  05FE  30E4               	movlw	228
  1850  05FF  00F3               	movwf	??_lcd_cmd
  1851  0600                     u867:
  1852  0600  0BF3               	decfsz	??_lcd_cmd,f
  1853  0601  2E00               	goto	u867
  1854  0602  0BF4               	decfsz	??_lcd_cmd+1,f
  1855  0603  2E00               	goto	u867
  1856  0604  0000               	nop
  1857  0605                     l1111:
  1858                           
  1859                           ;lcd.c: 46:  RA0=1;
  1860  0605  1283               	bcf	3,5	;RP0=0, select bank0
  1861  0606  1303               	bcf	3,6	;RP1=0, select bank0
  1862  0607  1405               	bsf	5,0	;volatile
  1863  0608                     l16:
  1864  0608  0008               	return
  1865  0609                     __end_of_lcd_cmd:
  1866                           
  1867                           	psect	text8
  1868  062B                     __ptext8:	
  1869 ;; *************** function _lcd_wr *****************
  1870 ;; Defined at:
  1871 ;;		line 24 in file "lcd.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  val             1    wreg     unsigned char 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  val             1    1[COMMON] unsigned char 
  1876 ;;  i               1    2[COMMON] unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, status,0
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1886 ;;      Params:         0       0       0       0
  1887 ;;      Locals:         2       0       0       0
  1888 ;;      Temps:          1       0       0       0
  1889 ;;      Totals:         3       0       0       0
  1890 ;;Total ram usage:        3 bytes
  1891 ;; Hardware stack levels used: 1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		_lcd_cmd
  1896 ;;		_lcd_dat
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           
  1901                           ;psect for function _lcd_wr
  1902  062B                     _lcd_wr:
  1903                           
  1904                           ;incstack = 0
  1905                           ; Regs used in _lcd_wr: [wreg+status,2+status,0]
  1906                           ;lcd_wr@val stored from wreg
  1907  062B  00F1               	movwf	lcd_wr@val
  1908  062C                     l1069:
  1909                           
  1910                           ;lcd.c: 24: void lcd_wr(unsigned char val);lcd.c: 25: {;lcd.c: 26:   unsigned char i;;lc
      +                          d.c: 28:   RB4=0;
  1911  062C  1283               	bcf	3,5	;RP0=0, select bank0
  1912  062D  1303               	bcf	3,6	;RP1=0, select bank0
  1913  062E  1206               	bcf	6,4	;volatile
  1914  062F                     l1071:
  1915                           
  1916                           ;lcd.c: 30:   for(i=0;i<8;i++)
  1917  062F  01F2               	clrf	lcd_wr@i
  1918  0630                     l1077:
  1919                           
  1920                           ;lcd.c: 31:   {;lcd.c: 32:     RB3=((val>>(7-i))&0x01);
  1921  0630  0871               	movf	lcd_wr@val,w
  1922  0631  00F0               	movwf	??_lcd_wr
  1923  0632  0872               	movf	lcd_wr@i,w
  1924  0633  3C07               	sublw	7
  1925  0634  3E01               	addlw	1
  1926  0635  2E38               	goto	u394
  1927  0636                     u395:
  1928  0636  1003               	clrc
  1929  0637  0CF0               	rrf	??_lcd_wr,f
  1930  0638                     u394:
  1931  0638  3EFF               	addlw	-1
  1932  0639  1D03               	skipz
  1933  063A  2E36               	goto	u395
  1934  063B  1870               	btfsc	??_lcd_wr,0
  1935  063C  2E3E               	goto	u401
  1936  063D  2E42               	goto	u400
  1937  063E                     u401:
  1938  063E  1283               	bcf	3,5	;RP0=0, select bank0
  1939  063F  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0640  1586               	bsf	6,3	;volatile
  1941  0641  2E45               	goto	u414
  1942  0642                     u400:
  1943  0642  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0643  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0644  1186               	bcf	6,3	;volatile
  1946  0645                     u414:
  1947  0645                     l1079:
  1948                           
  1949                           ;lcd.c: 33:     RB4=1;
  1950  0645  1606               	bsf	6,4	;volatile
  1951  0646                     l1081:
  1952                           
  1953                           ;lcd.c: 34:     RB4=0;
  1954  0646  1206               	bcf	6,4	;volatile
  1955                           
  1956                           ;lcd.c: 35:   }
  1957  0647  3001               	movlw	1
  1958  0648  00F0               	movwf	??_lcd_wr
  1959  0649  0870               	movf	??_lcd_wr,w
  1960  064A  07F2               	addwf	lcd_wr@i,f
  1961  064B                     l1083:
  1962  064B  3008               	movlw	8
  1963  064C  0272               	subwf	lcd_wr@i,w
  1964  064D  1C03               	skipc
  1965  064E  2E50               	goto	u421
  1966  064F  2E51               	goto	u420
  1967  0650                     u421:
  1968  0650  2E30               	goto	l1077
  1969  0651                     u420:
  1970  0651                     l13:
  1971  0651  0008               	return
  1972  0652                     __end_of_lcd_wr:
  1973                           
  1974                           	psect	text9
  1975  0652                     __ptext9:	
  1976 ;; *************** function _eeprom_write *****************
  1977 ;; Defined at:
  1978 ;;		line 6 in file "D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eewrite.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  addr            1    wreg     unsigned char 
  1981 ;;  value           1    0[COMMON] unsigned char 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  addr            1    2[COMMON] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1993 ;;      Params:         1       0       0       0
  1994 ;;      Locals:         1       0       0       0
  1995 ;;      Temps:          1       0       0       0
  1996 ;;      Totals:         3       0       0       0
  1997 ;;Total ram usage:        3 bytes
  1998 ;; Hardware stack levels used: 1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function _eeprom_write
  2008  0652                     _eeprom_write:
  2009                           
  2010                           ;incstack = 0
  2011                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2012                           ;eeprom_write@addr stored from wreg
  2013  0652  00F2               	movwf	eeprom_write@addr
  2014  0653                     l268:	
  2015                           ;D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);D:\program files\Microchip\xc8\v2.32\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  2016                           
  2017  0653                     l269:
  2018  0653  1683               	bsf	3,5	;RP0=1, select bank1
  2019  0654  1303               	bcf	3,6	;RP1=0, select bank1
  2020  0655  189C               	btfsc	28,1	;volsfr
  2021  0656  2E58               	goto	u631
  2022  0657  2E59               	goto	u630
  2023  0658                     u631:
  2024  0658  2E53               	goto	l269
  2025  0659                     u630:
  2026  0659                     l1235:
  2027  0659  0872               	movf	eeprom_write@addr,w
  2028  065A  009B               	movwf	27	;volatile
  2029  065B  0870               	movf	eeprom_write@value,w
  2030  065C  009A               	movwf	26	;volatile
  2031  065D                     l1237:
  2032  065D  303F               	movlw	63
  2033  065E  00F1               	movwf	??_eeprom_write
  2034  065F  0871               	movf	??_eeprom_write,w
  2035  0660  059C               	andwf	28,f	;volsfr
  2036  0661                     l1239:
  2037  0661  1283               	bcf	3,5	;RP0=0, select bank0
  2038  0662  1303               	bcf	3,6	;RP1=0, select bank0
  2039  0663  1003               	bcf	3,0	;volatile
  2040  0664                     l1241:
  2041  0664  1F8B               	btfss	11,7	;volatile
  2042  0665  2E67               	goto	u641
  2043  0666  2E68               	goto	u640
  2044  0667                     u641:
  2045  0667  2E69               	goto	l272
  2046  0668                     u640:
  2047  0668                     l1243:
  2048  0668  1403               	bsf	3,0	;volatile
  2049  0669                     l272:
  2050  0669  138B               	bcf	11,7	;volatile
  2051  066A  1683               	bsf	3,5	;RP0=1, select bank1
  2052  066B  1303               	bcf	3,6	;RP1=0, select bank1
  2053  066C  151C               	bsf	28,2	;volsfr
  2054  066D                     l1245:
  2055  066D  3055               	movlw	85
  2056  066E  009D               	movwf	29	;volsfr
  2057  066F  30AA               	movlw	170
  2058  0670  009D               	movwf	29	;volsfr
  2059  0671                     l1247:
  2060  0671  149C               	bsf	28,1	;volsfr
  2061  0672                     l1249:
  2062  0672  111C               	bcf	28,2	;volsfr
  2063  0673                     l1251:
  2064  0673  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0674  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0675  1C03               	btfss	3,0	;volatile
  2067  0676  2E78               	goto	u651
  2068  0677  2E79               	goto	u650
  2069  0678                     u651:
  2070  0678  2E7A               	goto	l275
  2071  0679                     u650:
  2072  0679                     l1253:
  2073  0679  178B               	bsf	11,7	;volatile
  2074  067A                     l275:
  2075  067A  0008               	return
  2076  067B                     __end_of_eeprom_write:
  2077                           
  2078                           	psect	text10
  2079  05AB                     __ptext10:	
  2080 ;; *************** function _eeprom_read *****************
  2081 ;; Defined at:
  2082 ;;		line 6 in file "D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eeread.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  addr            1    wreg     unsigned char 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  addr            1    1[COMMON] unsigned char 
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      unsigned char 
  2089 ;; Registers used:
  2090 ;;		wreg, status,2, status,0
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2096 ;;      Params:         0       0       0       0
  2097 ;;      Locals:         1       0       0       0
  2098 ;;      Temps:          1       0       0       0
  2099 ;;      Totals:         2       0       0       0
  2100 ;;Total ram usage:        2 bytes
  2101 ;; Hardware stack levels used: 1
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           
  2110                           ;psect for function _eeprom_read
  2111  05AB                     _eeprom_read:
  2112                           
  2113                           ;incstack = 0
  2114                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  2115                           ;eeprom_read@addr stored from wreg
  2116  05AB  00F1               	movwf	eeprom_read@addr
  2117  05AC                     l249:	
  2118                           ;D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eeread.c: 8:  do
  2119                           
  2120  05AC  0064               	clrwdt	;# 
  2121  05AD  1683               	bsf	3,5	;RP0=1, select bank1
  2122  05AE  1303               	bcf	3,6	;RP1=0, select bank1
  2123  05AF  189C               	btfsc	28,1	;volsfr
  2124  05B0  2DB2               	goto	u621
  2125  05B1  2DB3               	goto	u620
  2126  05B2                     u621:
  2127  05B2  2DAC               	goto	l249
  2128  05B3                     u620:
  2129  05B3                     l1231:
  2130                           
  2131                           ;D:\program files\Microchip\xc8\v2.32\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  2132  05B3  0871               	movf	eeprom_read@addr,w
  2133  05B4  009B               	movwf	27	;volatile
  2134  05B5  303F               	movlw	63
  2135  05B6  00F0               	movwf	??_eeprom_read
  2136  05B7  0870               	movf	??_eeprom_read,w
  2137  05B8  059C               	andwf	28,f	;volsfr
  2138  05B9  141C               	bsf	28,0	;volsfr
  2139  05BA  081A               	movf	26,w	;volatile
  2140  05BB                     l251:
  2141  05BB  0008               	return
  2142  05BC                     __end_of_eeprom_read:
  2143  007E                     btemp	set	126	;btemp
  2144  007E                     wtemp0	set	126
  2145                           
  2146                           	psect	config
  2147                           
  2148                           ;Config register CONFIG @ 0x2007
  2149                           ;	Oscillator Selection bits
  2150                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  2151                           ;	Watchdog Timer Enable bit
  2152                           ;	WDTE = OFF, WDT disabled
  2153                           ;	Power-up Timer Enable bit
  2154                           ;	PWRTE = OFF, PWRT disabled
  2155                           ;	RA5/MCLR/VPP Pin Function Select bit
  2156                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  2157                           ;	Brown-out Detect Enable bit
  2158                           ;	BOREN = OFF, BOD disabled
  2159                           ;	Low-Voltage Programming Enable bit
  2160                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  2161                           ;	Data EE Memory Code Protection bit
  2162                           ;	CPD = OFF, Data memory code protection off
  2163                           ;	Flash Program Memory Code Protection bit
  2164                           ;	CP = OFF, Code protection off
  2165  2007                     	org	8199
  2166  2007  3F18               	dw	16152

Data Sizes:
    Strings     125
    Constant    4
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9       9
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(1) Largest target is 45
		 -> STR_5(CODE[15]), STR_4(CODE[18]), STR_3(CODE[24]), STR_2(CODE[23]), 
		 -> STR_1(CODE[45]), 


Critical Paths under _main in COMMON

    _main->_tc_tecla
    _tc_tecla->___bmul
    _lcd_init->_lcd_cmd
    _exibirMensagemAcessoNegado->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_dat->_lcd_wr
    _lcd_cmd->_lcd_wr

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    1890
                                             13 COMMON     1     1      0
                                              0 BANK0      9     9      0
                        _eeprom_read
                       _eeprom_write
         _exibirMensagemAcessoNegado
                            _lcd_dat
                           _lcd_init
                           _tc_tecla
 ---------------------------------------------------------------------------------
 (1) _tc_tecla                                             9     7      2     759
                                              4 COMMON     9     7      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     320
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     112
                                              6 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _exibirMensagemAcessoNegado                           0     0      0     479
                            _lcd_cmd
                            _lcd_str
 ---------------------------------------------------------------------------------
 (2) _lcd_str                                              3     3      0     367
                                              6 COMMON     3     3      0
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (1) _lcd_dat                                              3     3      0     112
                                              3 COMMON     3     3      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0     112
                                              3 COMMON     3     3      0
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               3     3      0      90
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         3     2      1     196
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eeprom_read
   _eeprom_write
   _exibirMensagemAcessoNegado
     _lcd_cmd
       _lcd_wr
     _lcd_str
       _lcd_dat
         _lcd_wr
   _lcd_dat
   _lcd_init
     _lcd_cmd
   _tc_tecla
     ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      9       9       3       11.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Jan 03 22:50:58 2022

                                  pc 0002                       ___bmul@product 0072  
                                 l13 0651                                   l22 06AA  
                                 l16 0608                                   l19 062A  
                                 l43 07E2                                   l28 05E6  
                                 l54 0791                                   l47 0766  
                                 l72 07FD                                   fsr 0004  
                                l125 070F                                  l305 05D0  
                                l251 05BB                                  l148 05AA  
                                l272 0669                                  l249 05AC  
                                l275 067A                                  l268 0653  
                                l269 0653                                  _RA0 0028  
                                _RB3 0033                                  _RB4 0034  
                                _RB5 0035                                  _RB6 0036  
                                _RB7 0037                                  u400 0642  
                                u401 063E                                  u420 0651  
                                u500 076A                                  u421 0650  
                                u501 0769                                  u414 0645  
                                u430 05E6                                  u510 0779  
                                u431 05E5                                  u511 0778  
                                u440 05C2                                  u600 07F2  
                                u520 0780                                  u441 05C1  
                                u601 07F1                                  u521 077F  
                                u450 05CF                                  u610 07F8  
                                u530 0790                                  u451 05CE  
                                u611 07F7                                  u531 078F  
                                u620 05B3                                  u540 0795  
                                u460 073A                                  u700 0707  
                                u621 05B2                                  u541 0794  
                                u461 0739                                  u701 0706  
                                u630 0659                                  u550 07A4  
                                u470 0749                                  u710 071C  
                                u631 0658                                  u551 07A3  
                                u471 0748                                  u711 071B  
                                u640 0668                                  u560 07AB  
                                u480 0750                                  u641 0667  
                                u561 07AA                                  u481 074F  
                                u650 0679                                  u394 0638  
                                u570 07C0                                  u490 0765  
                                u651 0678                                  u395 0636  
                                u571 07BF                                  u491 0764  
                                u580 07D3                                  u660 06D4  
                                u581 07D2                                  u661 06D3  
                                u590 07EC                                  u807 0683  
                                u591 07EB                                  u680 06EE  
                                u817 0691                                  u681 06ED  
                                u690 06F7                                  u827 0699  
                                u595 07E8                                  u691 06F6  
                                u675 06DA                                  u837 0616  
                                u847 0622                                  u767 073E  
                                u857 05F4                                  u777 076E  
                                u867 0600                                  u787 0799  
                                u797 07D7                                  fsr0 0004  
                               l1101 05EB                                 l1111 0605  
                               l1103 05ED                                 l1105 05F0  
                               l1113 05D2                                 l1121 05BD  
                               l1201 0795                                 l1107 05F9  
                               l1115 05D4                                 l1131 05CF  
                               l1123 05BE                                 l1211 07B0  
                               l1203 079E                                 l1109 05FC  
                               l1117 05D9                                 l1141 068B  
                               l1125 05C2                                 l1213 07BA  
                               l1221 07D3                                 l1301 06EE  
                               l1231 05B3                                 l1071 062F  
                               l1119 05DD                                 l1151 06A2  
                               l1143 068D                                 l1135 067B  
                               l1127 05C6                                 l1223 07EC  
                               l1207 07A5                                 l1215 07C1  
                               l1311 071C                                 l1303 06F7  
                               l1241 0664                                 l1081 0646  
                               l1153 06A4                                 l1145 0697  
                               l1137 067F                                 l1129 05C8  
                               l1225 07F2                                 l1217 07C9  
                               l1209 07AB                                 l1161 0721  
                               l1305 0701                                 l1251 0673  
                               l1243 0668                                 l1235 0659  
                               l1083 064B                                 l1091 0612  
                               l1155 06A6                                 l1147 069E  
                               l1139 0688                                 l1227 07F8  
                               l1219 07CD                                 l1171 072D  
                               l1163 0725                                 l1307 0707  
                               l1253 0679                                 l1245 066D  
                               l1237 065D                                 l1077 0630  
                               l1069 062C                                 l1093 061B  
                               l1085 060A                                 l1157 06A8  
                               l1149 06A0                                 l1181 074A  
                               l1173 0736                                 l1165 072C  
                               l1309 0716                                 l1247 0671  
                               l1239 0661                                 l1079 0645  
                               l1095 061E                                 l1087 060D  
                               l1255 05A2                                 l1191 0773  
                               l1183 0750                                 l1175 073A  
                               l1159 071F                                 l1271 06B4  
                               l1249 0672                                 l1097 0627  
                               l1089 060F                                 l1257 05A8  
                               l1185 0755                                 l1177 0743  
                               l1281 06C4                                 l1273 06B8  
                               l1099 05E8                                 l1195 077A  
                               l1187 075F                                 l1283 06CB  
                               l1275 06BC                                 l1267 06AB  
                               l1197 0780                                 l1189 076A  
                               l1285 06CF                                 l1277 06BE  
                               l1269 06B1                                 l1199 078A  
                               l1295 06D6                                 l1279 06C3  
                               l1297 06E2                                 l1289 06D5  
                               l1299 06E8                                 STR_1 000B  
                               STR_2 0050                                 STR_3 0038  
                               STR_4 0067                                 STR_5 0079  
                     ??_eeprom_write 0071   __end_of_exibirMensagemAcessoNegado 05AB  
         _exibirMensagemAcessoNegado 05A2                                 _main 06AB  
                               btemp 007E                                 start 0000  
                  ___bmul@multiplier 0073                                ?_main 0070  
                              _EEADR 009B                                _CMCON 001F  
                              _PORTA 0005                                _PORTB 0006  
                              _TRISA 0085                                _TRISB 0086  
                    __end_of_lcd_dat 062B                      __end_of_lcd_cmd 0609  
                    __end_of_lcd_str 05E7                                _linha 0007  
                              main@i 0027                                main@j 0028  
                              pclath 000A                                status 0003  
                              wtemp0 007E                      __initialization 07FE  
                       __end_of_main 071F                               ??_main 007D  
                    tc_tecla@timeout 0074            main@countRecordedAccesses 0025  
                             _EEDATA 009A                               _EECON1 009C  
                             _EECON2 009D                 __size_of_eeprom_read 0011  
                   __end_of_lcd_init 06AB                               ___bmul 05BC  
                             _lcd_wr 062B                 __end_of_eeprom_write 067B  
                          ??_lcd_dat 0073                            ??_lcd_cmd 0073  
                   __end_of_tc_tecla 07FE                            ??_lcd_str 0076  
            __end_of__initialization 07FE                      eeprom_read@addr 0071  
                ___bmul@multiplicand 0070                       __pcstackCOMMON 0070  
                      __end_of_linha 000B                    eeprom_write@value 0070  
        ?_exibirMensagemAcessoNegado 0070                          tc_tecla@ret 007B  
                        tc_tecla@tmp 007A                           __pmaintext 06AB  
                            ?___bmul 0070                              ?_lcd_wr 0070  
                          ?_lcd_init 0070                           __stringtab 0001  
                          ?_tc_tecla 0074                __size_of_eeprom_write 0029  
                    __size_of___bmul 0015                      __size_of_lcd_wr 0027  
                   main@infoDigitada 0020                              __ptext1 071F  
                            __ptext2 05BC                              __ptext3 067B  
                            __ptext4 05A2                              __ptext5 05D1  
                            __ptext6 0609                              __ptext7 05E7  
                            __ptext8 062B                              __ptext9 0652  
                            _lcd_dat 0609                              _lcd_cmd 05E7  
                            _lcd_str 05D1                  main@countSimbolosId 0021  
                            lcd_wr@i 0072                              main@aux 0026  
                         ??_lcd_init 0076                 end_of_initialization 07FE  
                       _eeprom_write 0652                           ??_tc_tecla 0076  
                          _PORTBbits 0006                           lcd_dat@val 0075  
                         lcd_cmd@val 0075                        ??_eeprom_read 0070  
                         lcd_str@str 0078                       __end_of___bmul 05D1  
                     __end_of_lcd_wr 0652        main@initTimerDisplayMessageQ3 0023  
                start_initialization 07FE                             ??___bmul 0071  
                __end_of_eeprom_read 05BC                             ??_lcd_wr 0070  
                          ___latbits 0000                        __pcstackBANK0 0020  
                   eeprom_write@addr 0072                    __size_of_lcd_init 0030  
                         tc_tecla@to 0078                    __size_of_tc_tecla 00DF  
                          __pstrings 0001                             ?_lcd_dat 0070  
                           ?_lcd_cmd 0070                             ?_lcd_str 0070  
                        _eeprom_read 05AB                             _PCONbits 008E  
                        __stringbase 0006                            lcd_wr@val 0071  
                          main@tecla 0024                           _EECON1bits 009C  
                 __end_of__stringtab 0007                     __size_of_lcd_dat 0022  
                   __size_of_lcd_cmd 0022                     __size_of_lcd_str 0016  
                          tc_tecla@i 007C                             __ptext10 05AB  
                           _lcd_init 067B                        __size_of_main 0074  
       ??_exibirMensagemAcessoNegado 0079                             _tc_tecla 071F  
               main@countSimbolosPin 0022                             lcd_str@i 0077  
                         _INTCONbits 000B  __size_of_exibirMensagemAcessoNegado 0009  
                          stringcode 0001                             stringdir 0001  
                           stringtab 0001                        ?_eeprom_write 0070  
                         _STATUSbits 0003                         ?_eeprom_read 0070  
